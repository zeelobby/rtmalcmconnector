/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace mavlcm
{
    public sealed class MDF_NEURAL_DECODER_OUTPUT : LCM.LCM.LCMEncodable
    {
        public String header;
        public double[] decoderoutput;
        public long timestamp;
 
        public MDF_NEURAL_DECODER_OUTPUT()
        {
            decoderoutput = new double[14];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x1e56da2e95a75d82L;
 
        static MDF_NEURAL_DECODER_OUTPUT()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("mavlcm.MDF_NEURAL_DECODER_OUTPUT"))
                return 0L;
 
            classes.Add("mavlcm.MDF_NEURAL_DECODER_OUTPUT");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.header); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            for (int a = 0; a < 14; a++) {
                outs.Write(this.decoderoutput[a]); 
            }
 
            outs.Write(this.timestamp); 
 
        }
 
        public MDF_NEURAL_DECODER_OUTPUT(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public MDF_NEURAL_DECODER_OUTPUT(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static mavlcm.MDF_NEURAL_DECODER_OUTPUT _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            mavlcm.MDF_NEURAL_DECODER_OUTPUT o = new mavlcm.MDF_NEURAL_DECODER_OUTPUT();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.header = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            this.decoderoutput = new double[(int) 14];
            for (int a = 0; a < 14; a++) {
                this.decoderoutput[a] = ins.ReadDouble();
            }
 
            this.timestamp = ins.ReadInt64();
 
        }
 
        public mavlcm.MDF_NEURAL_DECODER_OUTPUT Copy()
        {
            mavlcm.MDF_NEURAL_DECODER_OUTPUT outobj = new mavlcm.MDF_NEURAL_DECODER_OUTPUT();
            outobj.header = this.header;
 
            outobj.decoderoutput = new double[(int) 14];
            for (int a = 0; a < 14; a++) {
                outobj.decoderoutput[a] = this.decoderoutput[a];
            }
 
            outobj.timestamp = this.timestamp;
 
            return outobj;
        }
    }
}

